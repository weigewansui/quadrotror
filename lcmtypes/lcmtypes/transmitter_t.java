/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class transmitter_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public short ch0;
    public short ch1;
    public short ch2;
    public short ch3;
    public short ch4;
    public short ch5;
    public short ch6;
    public short ch7;
 
    public transmitter_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x94eb226dd91614d6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.transmitter_t.class))
            return 0L;
 
        classes.add(lcmtypes.transmitter_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeShort(this.ch0); 
 
        outs.writeShort(this.ch1); 
 
        outs.writeShort(this.ch2); 
 
        outs.writeShort(this.ch3); 
 
        outs.writeShort(this.ch4); 
 
        outs.writeShort(this.ch5); 
 
        outs.writeShort(this.ch6); 
 
        outs.writeShort(this.ch7); 
 
    }
 
    public transmitter_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public transmitter_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.transmitter_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.transmitter_t o = new lcmtypes.transmitter_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.ch0 = ins.readShort();
 
        this.ch1 = ins.readShort();
 
        this.ch2 = ins.readShort();
 
        this.ch3 = ins.readShort();
 
        this.ch4 = ins.readShort();
 
        this.ch5 = ins.readShort();
 
        this.ch6 = ins.readShort();
 
        this.ch7 = ins.readShort();
 
    }
 
    public lcmtypes.transmitter_t copy()
    {
        lcmtypes.transmitter_t outobj = new lcmtypes.transmitter_t();
        outobj.timestamp = this.timestamp;
 
        outobj.ch0 = this.ch0;
 
        outobj.ch1 = this.ch1;
 
        outobj.ch2 = this.ch2;
 
        outobj.ch3 = this.ch3;
 
        outobj.ch4 = this.ch4;
 
        outobj.ch5 = this.ch5;
 
        outobj.ch6 = this.ch6;
 
        outobj.ch7 = this.ch7;
 
        return outobj;
    }
 
}

